//This procedutre requires the MakeFKItems script provided below this procedure
//This proc checks for existing group nodes and creates new ones in the case of their absence.
//It takes one argument which should correspond to the name of which you would like the FK items to be named
//There are no other requirements for this procedure
proc CheckGrps(string $ObjectName)
{
    MakeFKItems($ObjectName);
    //This if statement checks for an existing joint group and if the joint group is already parented then it bypasses what would cause an error
    if (`objExists "Skeleton"` && isParentOf("Skeleton", ($ObjectName + "_1_jnt")) == false)
    {           
        //It then selects the group it was testing for and adds the new joint chain to it
        select -r ($ObjectName + "_1_jnt");
        select -add "Skeleton";
        parent;
    }//End if
    
    //This if statement checks for an overall control group
    if (`objExists "Controls"`)
    {
        //If it exists then it adds the newly made group to the existing one
        select -r ($ObjectName + "_1_group");
        select -add "Controls";
        parent;
    }//End if

    //If the groups dont already exist then the proc runs the script and makes the apropriate group nodes
    else
    { 
        group -name "Skeleton" ($ObjectName + "_1_jnt");
        group -name "Controls" ($ObjectName + "_1_group");
        group -name "Asset" "Controls" "Skeleton";
    }//End else
    
    //This line selects the newly created group from the make FK script
    select -r -hi ($ObjectName + "_1_group");
    
    //This adds a display layer for the controls
    createDisplayLayer -name "Controls_Group" -number 1 -nr; 
    
    //These lines then lock and hide the visibility of those groups
    string $hideVisSels[] = `ls -sl`;
    for ($i = 0; $i < size($hideVisSels); $i++) 
    {
        setAttr -lock true -keyable false -channelBox false ($hideVisSels[$i] + ".v");
    }
    
    //These lines then add the joint chain that was handled and deletes the history of all the affected objects in the Make Fk script
    select -add -hi ($ObjectName + "_1_jnt");
    delete -all -constructionHistory;
    
    //These lines create a display layer for the joints
    select -d -hi ($ObjectName + "_1_group");
    createDisplayLayer -name "Joints" -number 1 -nr;
}//End CheckGrps

//This is the MakeFKItems script
//It takes one argument which is used to rename the involved FK parts to the supplied string

//To use this script select the root joint of any single string of joints
//The script will then create an FK system that supplies a control to each joint
proc MakeFKItems(string $ObjectName)
{  
    //These lines select all the joints in the hierarchy and add them to a string array
    select -hi;
    string $selections[] = `ls -sl`;
    //This line creates an int value based on how many joints are in the chain
    int $numItemsSel = size($selections);


    //This for loop is the main constructor for the controls groups and positions of each object.
    //It runs the same number of times as the number of joints in the selected chain
    for ($i = 0; $i < $numItemsSel; $i++)
    {
        //These lines define the created controls and groups respectivly for use in reference to parenting
        string $circleName = "nurbsCircle" + ($i + 1);
        string $groupName = "null" + ($i + 1);
        
        //These lines fine the postion and orientation of the selected joints
        float $jointPos[] = `xform -q -ws -t $selections[$i]`;
        float $jointOrient[] = `joint -q -o $selections[$i]`;
        
        //This line creates the control
        circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
   
        //This line moves the control to the respective joint
        move $jointPos[0] $jointPos[1] $jointPos[2];
        
        //These lines create and postion the groups for the FK system
        CreateEmptyGroup;
        move $jointPos[0] $jointPos[1] $jointPos[2];
        rotate $jointOrient[0] $jointOrient[1] $jointOrient[2];
        
        //These lines select the first control and group and parent them together
        select -r $circleName;
        select -add $groupName;
        parent;
        
        //The control's transformations are then frozen for clarity with respect to animation
        select -r $circleName;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
        
        //These lines select the order of control to joint and then creates the parent contraint for the control
        select -r $circleName;
        select -add $selections[$i];
        parentConstraint -mo -weight 1;
        //These lines create a scale constraint for the control
        scaleConstraint -offset 1 1 1 -weight 1;
        
        
        
        //If the joint chain is longer than 1 
        if (`objExists nurbsCircle2` && isParentOf($selections[$i - 1], $selections[$i]) == true)
        {
            $circleName = "nurbsCircle" + $i;
            
            select -r $groupName;
            select -add $circleName;
            parent;
            
        }
   
    }//End For loop
    
    //This for loop renames the objects assosiated with the FK system
    for ($i = 0; $i < $numItemsSel; $i++)
    {
        //These define what the current name of the controls and groups that need to be renamed are
        string $circleName = "nurbsCircle" + ($i + 1);
        string $groupName = "null" + ($i + 1);
        
        //These lines rename the group, control, and joints respectivly
        rename $groupName ($ObjectName + "_" + ($i + 1) + "_group");
        rename $circleName ($ObjectName + "_" + ($i + 1) + "_ctrl");
        rename $selections[$i] ($ObjectName + "_" + ($i + 1) + "_jnt");
    }//End for loop
}//End MakeFKItems

CheckGrps("leg");